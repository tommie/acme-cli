#!/bin/bash
#
# An ACME challenge solver for "acmeclient issuecert" using an Apache
# server.
#
# This tries to do a minimum amount of work and leaving the validation
# to Apache. It can solve http-01 (cost 1).
#
# See the "issuecert" section of README.md for more information.
#
# NOTE: At most one instance of this script may run at any one time.
# We assume $challenge_dir and $config_file are untouched by others.
#

# Avoid silent failures.
set -e
set -o pipefail

# A directory where http://$name/.well-known/acme-challenge is pointing
# for each $name you want to solve http-01. Note it's not using HTTPS,
# as mandated by the ACME specification, Sec. 7.2.
challenge_dir=${ACME_CHALLENGE_DIR:-/var/www/localhost/htdocs/.well-known/acme-challenge}

progname=$(basename "$0")

if type -p gawk >/dev/null; then
    awk() {
	gawk "$@"
    }
elif type -p mawk >/dev/null; then
  # mawk batches line reading unless -Winteractive is given.
    awk() {
	mawk -Winteractive "$@"
    }
fi

case "$ACME_MODE" in
cost)
  # Read challenge records up until the first empty line.
  # Writes cost on success, and nothing if we cannot solve all challenges.
  awk -F$'\t' '
      $1 == "http-01" { cost += 1; next; }
      !$0 { exit 0; }
      { cost = -1; exit 0; }
      END { if (cost >= 0) print cost; }'
  ;;

solve)
  tmpdir=$(mktemp -d --tmpdir "$progname.XXXXXXXXXX")
  trap 'rm -fr "$tmpdir" "$challenge_dir"/*' EXIT

  # Read challenge records up until the first empty line.
  IFS=$'\n'
  cs=( $(awk -F$'\t' '!$0 { exit(0); } { print; }') )

  # Parse tab-separated CSV.
  IFS=$'\t'
  for c in "${cs[@]}"; do
    # Split CSV fields.
    read type fields <<<"$c"
    f=( $fields )

    case "$type" in
    http-01)
      # Save the key authorization to the publicly accessible file.
      echo "${f[1]}" >"$challenge_dir/${f[0]}"
      # Respond with the key authorization.
      echo "$type	${f[1]}"
      ;;
      
    *)
      echo "$progname: unhandled challenge type: $type" >&2
      exit 2
    esac
  done

  # Wait for stdin EOF.
  cat >/dev/null
  ;;

*)
  echo "$progname: unknown ACME mode: $ACME_MODE" >&2
  echo "$progname: this program should be run via acmeclient, not manually." >&2
  exit 1
esac
