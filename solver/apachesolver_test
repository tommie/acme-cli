#!/bin/bash
#
# Unit tests for apachesolver.
#

set -e
apachesolver=$(dirname "$0")/apachesolver

test-cost() {
  local got=$(ACME_MODE=cost "$apachesolver" <<EOF
http-01	token

EOF
  )
  local want='1'
  if [ "x$got" != "x$want" ]; then
    fatalf "[http-01] apachesolver: got '%s', want '%s'" "$got" "$want"
  fi
  
  local got=$(ACME_MODE=cost "$apachesolver" <<EOF
http-01	token
tls-sni-01	token

EOF
  )
  local want='3'
  if [ "x$got" != "x$want" ]; then
    fatalf "[two types] apachesolver: got '%s', want '%s'" "$got" "$want"
  fi
  
  local got=$(ACME_MODE=cost "$apachesolver" <<EOF
http-01	token
dns-01	token

EOF
  )
  local want=''
  if [ "x$got" != "x$want" ]; then
    fatalf "[unsolvable] apachesolver: got '%s', want '%s'" "$got" "$want"
  fi
}

test-solve-http-01() {
  trap "stop-solver '$TESTTMPDIR/stdin'" EXIT
  start-solver "$TESTTMPDIR/stdin" >"$TESTTMPDIR/stdout" <<EOF
http-01	token	keyauth

EOF

  # Wait for solver to start.
  while ! grep http-01 "$TESTTMPDIR/stdout" >/dev/null; do
    sleep 0.01
  done
  
  local got=$(<"$TESTTMPDIR/stdout")
  local want='http-01	keyauth'
  if [ "x$got" != "x$want" ]; then
    fatalf "apachesolver: got '%s', want '%s'" "$got" "$want"
  fi

  if ! [ -e "$TESTTMPDIR/challenges/token" ]; then
    fatalf "apachesolver: .../challenges/token file missing"
  fi

  local got=$(<"$TESTTMPDIR/challenges/token")
  local want=keyauth
  if [ "x$got" != "x$want" ]; then
    fatalf "apachesolver file: got '%s', want '%s'" "$got" "$want"
  fi
}

test-solve-tls-sni-01() {
  trap "stop-solver '$TESTTMPDIR/stdin'" EXIT
  start-solver "$TESTTMPDIR/stdin" >"$TESTTMPDIR/stdout" <<EOF
tls-sni-01	token	keyauth	a.b.acme.invalid	c.d.acme.invalid

EOF

  # Wait for solver to start.
  while ! grep tls-sni-01 "$TESTTMPDIR/stdout" >/dev/null; do
    sleep 0.01
  done
  
  local got=$(<"$TESTTMPDIR/stdout")
  local want='tls-sni-01	keyauth'
  if [ "x$got" != "x$want" ]; then
    fatalf "apachesolver: got '%s', want '%s'" "$got" "$want"
  fi

  if ! [ -e "$TESTTMPDIR/apache.conf" ]; then
    fatalf "apachesolver: .../apache.conf file missing"
  fi

  IFS=$'\n'
  local certfiles=( $(awk '$1 == "SSLCertificateFile" { print $2; }' <"$TESTTMPDIR/apache.conf") )
  local keyfiles=( $(awk '$1 == "SSLCertificateKeyFile" { print $2; }' <"$TESTTMPDIR/apache.conf" | sort -u) )

  local want=2
  if (( ${#certfiles[@]} != want )); then
    fatalf "apachesolver certfiles: got '%s', want count '%s'" "${certfiles[*]}" "$want"
  fi

  for cf in "${certfiles[@]}"; do
    got=$(openssl x509 -inform PEM -in "$cf" -subject -noout)
    want='/CN=.*\.acme\.invalid$'
    if ! grep "$want" <<<"$got" >/dev/null; then
      fatalf "apachesolver certfile %s: got '%s', want regexp '%s'" "$cf" "$got" "$want"
    fi
  done
  
  local want=1
  if (( ${#keyfiles[@]} != want )); then
    fatalf "apachesolver keyfiles: got '%s', want count '%s'" "${keyfiles[*]}" "$want"
  fi

  for kf in "${keyfiles[@]}"; do
    got=$(openssl rsa -inform PEM -in "$kf" -check -noout)
    want='RSA key ok'
    if [ "x$got" != "x$want" ]; then
      fatalf "apachesolver keyfile %s: got '%s', want regexp '%s'" "$kf" "$got" "$want"
    fi
  done
}

test-solve-unknown() {
  local got
  got=$(solve 2>&1 <<EOF
unknown

EOF
  )
  local status=$? want=2
  if [ $status -ne $want ]; then
    fatalf "apachesolver $?: got '%s', want '%s'" "$status" "$want"
  fi
  
  local want='apachesolver: unhandled challenge type: unknown'
  if [ "x$got" != "x$want" ]; then
    fatalf "apachesolver: got '%s', want '%s'" "$got" "$want"
  fi
}

# solve starts and immediately stops the solver.
# Challenges provided on stdin are forwarded.
solve() {
  if ! start-solver "$TESTTMPDIR/stdin" "$@"; then
    local status=$?
  fi
  stop-solver "$TESTTMPDIR/stdin"
  return $status
}

# start-solver starts the solver.
# Challenges provided on stdin are forwarded.
# Use stop-solver to stop a running solver.
#
# $1 is the path to use for the stdin FIFO.
# $@ are propagated to the apachesolver command line.
start-solver() {
  local stdin=$1
  shift

  mkfifo "$stdin"
  (
    # Forward stdin to solver.
    cat
    # Wait until caller is ready to stop.
    while [ -e "$stdin" ]; do
      sleep 0.01
    done
  ) </dev/stdin >"$stdin" &
  mkdir -p "$TESTTMPDIR/challenges"
  ACME_MODE=solve \
      ACME_CHALLENGE_DIR=$TESTTMPDIR/challenges \
      ACME_CONFIG_FILE=$TESTTMPDIR/apache.conf \
      ACME_APACHE2CTL=: \
      "$apachesolver" "$@" <"$stdin" &
}

# stop-solver stops a running solver.
# It assumes the solver is the only background job running.
#
# $1 is the path used for the stdin FIFO in start-solver.
stop-solver() {
  rm "$1"
  wait %2
}

# fatalf signals the test to fail.
# Arguments are interpreted as printf arguments.
fatalf() {
  local args=( "$@" )
  args[0]="$TESTNAME: ${args[0]}\n"
  printf "${args[@]}" >&2
  exit 1
}

# run-test runs a single test in a subshell.
# A temporary directory is created (and removed on exit). Its name is stored as
# the TESTTMPDIR environment variable.
#
# $1 is the test function name.
run-test() {
  (
    export TESTNAME=$1
    export TESTTMPDIR=$(mktemp -d --tmpdir test.XXXXXXXXXX)
    trap "rm -fr '$TESTTMPDIR'" EXIT
    # Subshell-in-subshell to allow tests to set their own traps.
    ( LANG=C LC_ALL=C "$@" )
  )
}

let nfail=0 nok=0 || :

for tst in $(declare -F | cut -d' ' -f3 | grep -E '^test-'); do
  if ! run-test "$tst"; then
    echo "Test $tst failed" >&2
    let nfail++ || :
  else
    echo "Test $tst OK" >&2
    let nok++ || :
  fi
done

if (( nfail != 0 )); then
  exit 10
fi
